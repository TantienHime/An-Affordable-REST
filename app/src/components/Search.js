// This is the file that will serve as the home page on load. It will be served up as a component to the index page at the root by react router.
import React, {Component} from 'react';
// import {Link} from 'react-router'

// So far, this is simply a dumb component copied directly from the index.html file. 
class Search extends Component {
     render(){
        let orgUnitList =[];
        // Strange thing: I did a console.log of "orgUnits" and it showed up twice in the console. One was empty, and one was 
        for (let i=0; i<this.props.orgUnits.length; i++){
          orgUnitList.push(
          <option value={this.props.orgUnits[i]}>{this.props.orgUnits[i]}</option>);
        }
        let returnSearch = []; //This is the container used to pass the search parameters back to the parent
          return (
        <div className="inner cover">
          <h1 className="cover-heading">I Need Affordable Housing</h1>
            <p className="lead">Search our system below.</p> 
            {/*<!-- From the node project. Need to fix the search.-->*/}
            <p className="lead"> 
                 {/*make sure that the action matches the react router endpoint*/}
                <form onSubmit={this.props.onSubmit}  > 
                  {/*action= "/search" method="GET"*/}
                  {/* Might use this for my front page...
                        <form action="/search" method="GET">
                              <input type="text" name="searchQuery" />
                              <input type="submit" />
                        </form>*/}
                {/*<!--This is the general search. Leaving it in for now, due to design issues, but functionality isn't there. This is secondary' -->*/}
                    {/*<input type="text" placeholder = "General Search - Not Currently Functioning" className="form-control" name="searchQuery" classID="searchInput" /> */}

                    {/*<!-- If there is time, I could implement in which district/orgUnit that the search could be performed. -->*/}
                    <div className="wrapper" classID="checkbox-wrapper">
                      <div className="form-group" classID="unitSize">
                        <div className="checkbox">
                          <label><input type="checkbox" value="bachelor" onChange={()=> {this.props.filterResults('bachelor')}}/>Bachelor</label>
                        </div>
                        <div className="checkbox">
                          <label><input type="checkbox" value="oneBr" onChange={()=> {this.props.filterResults('oneBr')}}/>1 Bedroom</label>
                        </div>
                        <div className="checkbox">
                          <label><input type="checkbox" value="twoBr" onChange={()=> {this.props.filterResults('twoBr')}}/>2 Bedroom</label>
                        </div>
                        <div className="checkbox">
                          <label><input type="checkbox" value="threeBr" onChange={()=> {this.props.filterResults('threeBr')}}/>3 Bedroom</label>
                        </div>
                        <div className="checkbox">
                          <label><input type="checkbox" value="fourBr" onChange={()=> {this.props.filterResults('fourBr')}}/>4 Bedroom</label>
                        </div>
                      </div>
                      <div className="form-group" classID="unitSpeciality">
                        <div className="checkbox">
                          <label><input type="checkbox" value="aboriginal" onChange={()=> {this.props.filterResults('aboriginal')}} />Aboriginal</label>
                        </div>
                        <div className="checkbox">
                          <label><input type="checkbox" value="accessible" onChange={()=> {this.props.filterResults('accessible')}}/>Accessible</label>
                        </div>
                        <div className="checkbox">
                          <label><input type="checkbox" value="seniors" onChange={()=> {this.props.filterResults('seniors')}}/>Seniors</label>
                        </div>
                        <div className="checkbox">
                          <label><input type="checkbox" value="supportive" onChange={()=> {this.props.filterResults('supportive')}}/>Supportive</label>
                        </div>
                      </div>
                    </div>
                    {/*<!--This select might be good for an option. This should be generated by the org units that are generated from the web scraping. Need to fix multi-select.-->*/}
                    {/*<div className="form-group" classID="orgUnitSelect"> 
                      <label for="orgUnit">Select organizational units:</label>
                      <select className="form-control">
                        {orgUnitList}
                      </select>
                    </div>                    */}
                    <input  type="submit" 
                            className="btn btn-lg btn-default" classID="search404button" />
                </form>
              </p>
        </div>
          );
     }
}

export default Search;

/*// This is the form that will add items to the list
class InputForm extends React.Component {
	constructor(){
		super();
		// The event handlers should reside where ever the state lives.
		this.state = {
			tempString: ""
		}
		this.inputString = this.inputString.bind(this)
		this.onFormSubmit = this.onFormSubmit.bind(this)
	}

	inputString(e){
		this.setState({
			tempString: e.target.value
		})
	}

	onFormSubmit(e){
		e.preventDefault();
		let newItem = this.state.tempString
		this.props.submitToDo(newItem)
	}

	render(){
		return(		
			<form onSubmit={this.onFormSubmit}>
				<input 	type="text" 	
						name="newText"  
						placeholder="Add a new item"
						value={this.state.tempString}
						onChange={this.inputString} />
				<input type="submit" className="btn btn-primary" />
			</form>
		)	
	}
}*/